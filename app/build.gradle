buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    def Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')
    if(versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    defaultConfig {
        applicationId "seatback.com.seatback"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode code
        versionName "1.1"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }

        android.applicationVariants.all { variant ->
            def appName
            //Check if an applicationName property is supplied; if not use the name of the parent project.
            if (project.hasProperty("applicationName")) {
                appName = applicationName
            } else {
                appName = parent.name
            }

            variant.outputs.each { output ->
                def newApkName
                //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
                if (output.zipAlign) {
                    newApkName = "${appName}-${output.baseName}-${variant.versionName}.apk"
                } else {
                    newApkName = "${appName}-${output.baseName}-${variant.versionName}-unaligned.apk"
                }
                output.outputFile = new File(output.outputFile.parent, newApkName)
            }
        }
    }
}
repositories {
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    // test libraries comes build in
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //support libraries
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //my own library for material design tabs: https://github.com/gilgoldzweig/EasyTabs
    compile 'com.github.gilgoldzweig:EasyTab:1.1.2'
    //glide image loading: https://github.com/bumptech/glide
    compile 'com.github.bumptech.glide:glide:3.7.0'
    //bluetooth: https://github.com/DeveloperPaul123/SimpleBluetoothLibrary
    compile 'com.github.DeveloperPaul123:SimpleBluetoothLibrary:1.5.1'
    //joda time for presenting the current time in the clock: http://www.joda.org/joda-time/
    compile 'joda-time:joda-time:2.9.7'
    //crashlytics crash remote reporter to help fix bugs from remote: https://fabric.io/kits
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.mcxiaoke.volley:library:1.0.19'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    testCompile 'junit:junit:4.12'
    compile files('libs/YouTubeAndroidPlayerApi.jar')
    compile 'com.google.android.gms:play-services-auth:9.2.0'
    compile 'com.google.firebase:firebase-core:9.2.0'                        // this line must be included to integrate with Firebase
    compile 'com.google.firebase:firebase-messaging:9.2.0'                   // this line must be included to use FCM

    compile 'jp.wasabeef:glide-transformations:3.0.1'
    // If you want to use the GPU Filters
    compile 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'}

apply plugin: 'com.google.gms.google-services'
